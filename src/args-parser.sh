#!/bin/bash

declare HELP_DETAILS='
Note: It uses the .env file in the current directory to load DB name and credentials.

Commands available (<command>):
    i, import       Import DB from SQL.
    e, export       Export DB to SQL ({database}.sql).
    b, backup       Backup DB to gzip format ({database}-{timestamp}.sql.gz).
'

declare DESCRIPTION='Export, import and backup MySQL/MariaDB databases'


function f_version
{
    declare version
    declare -i r=0


    # Intentar usar git describe para una versión más exacta
    which git >/dev/null 2> /dev/null
    r=$? # ¿Git está instalado?
    if [ $r -eq 0 ]; then
        t="$(cd ${SCRIPT_DIR:?} && git describe 2> /dev/null)"
        r=$? # ¿Fue instalado como repositorio git y tiene nombres para describir?
    fi

    if [ $r -eq 0 ]; then
        version="$(cd ${SCRIPT_DIR} && git describe --abbrev=1)"
        version="${version%-g*}"
    else
        version=${1:-Undefined}
    fi

    echo " ${version}"
}


# DEFINE_SCRIPT_DIR()
# ARG_POSITIONAL_SINGLE([command],[Command to perform.],[])
# ARG_POSITIONAL_SINGLE([target-dir],[Target directory to search/place SQL.],[.])
# ARG_OPTIONAL_SINGLE([target],[t],[[DEPRECATED] Use «<target-dir>» instead.],[])
# ARG_OPTIONAL_BOOLEAN([auto-backup],[],[Run «backup» before «import».],[on])
# ARG_HELP([$DESCRIPTION\n],[$HELP_DETAILS])
#
# ARG_VERBOSE([v])
#
# ARGBASH_WRAP([version],[filename])
#
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='thv'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_target_dir="."
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_target=
_arg_auto_backup="on"
_arg_verbose=0


print_help()
{
	printf '%s\n' "$DESCRIPTION
		"
	printf 'Usage: %s [-t|--target <arg>] [--(no-)auto-backup] [-h|--help] [-v|--verbose] [--version] <command> [<target-dir>]\n' "$0"
	printf '\t%s\n' "<command>: Command to perform."
	printf '\t%s\n' "<target-dir>: Target directory to search/place SQL. (default: '.')"
	printf '\t%s\n' "-t, --target: [DEPRECATED] Use «<target-dir>» instead. (no default)"
	printf '\t%s\n' "--auto-backup, --no-auto-backup: Run «backup» before «import». (on by default)"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\t%s\n' "-v, --verbose: Set verbose output (can be specified multiple times to increase the effect)"
	printf '\t%s\n' "--version: Display the version you are using."
	printf '\n%s\n' "$HELP_DETAILS"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-t|--target)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_target="$2"
				shift
				;;
			--target=*)
				_arg_target="${_key##--target=}"
				;;
			-t*)
				_arg_target="${_key##-t}"
				;;
			--no-auto-backup|--auto-backup)
				_arg_auto_backup="on"
				test "${1:0:5}" = "--no-" && _arg_auto_backup="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			-v|--verbose)
				_arg_verbose=$((_arg_verbose + 1))
				;;
			-v*)
				_arg_verbose=$((_arg_verbose + 1))
				_next="${_key##-v}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					begins_with_short_option "$_next" && shift && set -- "-v" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			--version)
				echo -n 'mysql-helper'; f_version v0.1.0
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'command'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require between 1 and 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 1 and 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_command _arg_target_dir "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash
_args_version=("${_args_version_opt[@]}" "${_args_version_pos[@]}")
script_dir="$(cd "$(dirname "$(readlink -e "${BASH_SOURCE[0]}")")" && pwd)" || die "Couldn't determine the script's running directory, which probably matters, bailing out" 2

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


declare -x run_backup=off
declare -x run_export=off
declare -x run_import=off
declare -x c_target_directory='.'
declare -x _PRINT_HELP=yes

function f_setup_command
{
    declare -r action="$1"

    case $action in
        -e|--export)
            echo -e "\nWARNING: «${action}» option as <command> is DEPRECATED. Use «export» instead."
            run_export=on
        ;;

        e|export)
            run_export=on
        ;;


        -b|--backup)
            echo -e "\nWARNING: «${action}» option as <command> is DEPRECATED. Use «backup» instead."
            run_backup=on
        ;;

        b|backup)
            run_backup=on
        ;;


        -i|--import)
            echo -e "\nWARNING: «${action}» option as <command> is DEPRECATED. Use «import» instead."
            run_import=on
        ;;
        i|import)
            run_import=on
        ;;

        *)    # Acción desconocida
            echo
            die "ERROR: <command> not recognized: «${action}»".
        ;;
    esac

    # Configurar auto-backup sólo si es para importar
    if [[ $run_import == on && ${_arg_auto_backup:?} == on ]]; then
        run_backup=on
    fi
}


function f_setup_target
{
    declare dir="${_arg_target_dir:?}"
    declare -i r=$?

    if [[ ${_arg_target:?} != '' ]]; then
        echo -e "\nWARNING: «--target» option is DEPRECATED. Use <target-dir> instead."

        if [[ ${_arg_target_dir} == '.' ]]; then
            dir="${_arg_target}"
        fi
    fi

    # Comprobar/normalizar directorio
    c_target_directory=$(realpath "${dir}")
    r=$?

    if [[ $r -ne 0 ]]; then
        die "ERROR: <target-dir> «${dir}». Ruta inválida." 3
    fi

    if [[ ! -d $c_target_directory ]]; then
        echo "Directorio «${c_target_directory}» no existe. Intentando crear..."
        mkdir -p "${c_target_directory}"
        r=$?

        if [[ $r -ne 0 ]]; then
            die "ERROR: <target-dir> «${dir}». No se pudo crear el directorio «${c_target_directory}»" 3
        fi
    fi
}

f_setup_command "${_arg_command:?}"

f_setup_target "${_arg_target_dir:?}"

echo "${_arg_target_dir}"
echo "${_arg_target}"

# ] <-- needed because of Argbash
